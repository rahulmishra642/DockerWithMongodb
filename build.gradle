
buildscript {
        repositories {
        jcenter()
            maven {
                url 'https://plugins.gradle.org/m2/'
            }
        }
        dependencies {
           classpath "com.bmuschko:gradle-docker-plugin:6.6.1"
        }
    }

plugins {
	id 'org.springframework.boot' version '2.3.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'com.bmuschko.docker-spring-boot-application' version '6.6.1'
	id 'java'
}

group = 'com.rainyday'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
apply plugin: "com.bmuschko.docker-spring-boot-application"
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

task copyFileJar(type: Copy) {
    from "$projectDir/build/libs/*.jar"
    into "/app/grocery.jar"
}

task createDockerfile(type: Dockerfile) {
    from 'openjdk:11'
    runCommand('mkdir -p /app/')
    dependsOn copyFileJar
    workingDir('/app')
    entryPoint 'java'
    defaultCommand '-jar', '/app/grocery.jar'
    exposePort(8080)
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    images.add('covetrus/spring-boot:latest')
}


task createDBContainer(type: DockerCreateContainer) {
    targetImageId "mongo:latest"
    containerName = 'mongocontainer'
    hostConfig.autoRemove = true
}

task createMyAppContainer(type: DockerCreateContainer) {
    dependsOn buildImage, createDBContainer
    targetImageId buildImage.getImageId()
    hostConfig.portBindings = ['8080:8080']
    hostConfig.autoRemove = true
    hostConfig.links = ["mongocontainer:database"]
    hostConfig.binds = ['/sys/fs/cgroup': '/sys/fs/cgroup']
    tty = true
}

task startDbAppContainer(type: DockerStartContainer) {
    dependsOn createDBContainer
    targetContainerId createDBContainer.getContainerId()
}

task startMyAppContainer(type: DockerStartContainer) {
    dependsOn createMyAppContainer, startDbAppContainer
    targetContainerId createMyAppContainer.getContainerId()
}

task stopMyAppContainer(type: DockerStopContainer) {
    targetContainerId createMyAppContainer.getContainerId()
}

task functionalTestMyApp(type: Test) {
    dependsOn startMyAppContainer
    finalizedBy stopMyAppContainer
}

docker {
    springBootApplication {
        baseImage = 'openjdk:8-alpine'
        ports = [9090, 8080]
        images = ['spring-boot:1.115', 'spring-boot:latest']
    }
}


repositories {
	jcenter()
	mavenCentral()
}



dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-mongodb'
	compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}



test {
	useJUnitPlatform()
}
